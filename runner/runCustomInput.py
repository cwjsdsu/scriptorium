import os
import subprocess

def runCustomInput(exec_name, input_template, param_dict, 
    workdir='', label='runCustom'):

    """
     Author: Oliver Gorton, 2020

     This is a function for running an executable program with a custom
     input file by replacing keywords in a template used by the executed
     code.

     exec_name: (string) containing the path to and name of the
         executable you want to run
     input_template: (string) this is an input or control file used by the executable
         and which will be edited by this function
     param_dict: (dictionary) of keywords and the values to which those keywords
         will be changed. The keywords are strings which should appear in the 
         input_template file. 
     workdir: (string) name of the working directory where you want to call
         the executable and send the output.
     label: (string) name for this job, to label the input and output files 
         generated by this function.

    """

    path = os.getcwd()
    os.chdir(workdir)

    findandreplace = "sed '"
    for keyword in param_dict.keys():
        findandreplace += "s/%s/%s/g;"%(keyword,param_dict[keyword])
    findandreplace += "' %s > %s.input"%(input_template,label)
    returned = subprocess.call(findandreplace, shell=True)

    command = "%s < %s.input > %s.output"%(exec_name,label,label)
    print(command)
    returned = subprocess.call(command,shell=True)

    os.chdir(path)

    return

# Original version using lists instead of a dictionary:
def runCustom(exec_name, input_template, pnames, pvalues, 
    workdir='', label='runCustom'):

    """
     Author: Oliver Gorton, 2020

     This is a function for running an executable program with a custom
     input file by replacing keywords in a template used by the executed
     code.

     exec_name: (string) containing the path to and name of the
         executable you want to run
     input_template: (string) this is an input or control file used by the executable
         and which will be edited by this function
     pnames: (list of strings) containing parameter keywords appearing in the
         input template, which will be replaced by pvalues
     pvalues: (list of numbers or strings) containing parameter values 
         corresponding to each parameter in pnames. Should be the same
         length as pnames.
     workdir: (string) name of the working directory where you want to call
         the executable and send the output.
     label: (string) name for this job, to label the input and output files 
         generated by this function.

     Example:
          import runner
          runner.runCustom("~/bin/bigstick.x","input.Z.N",['NumProt','NumNeutron'],[4,6],
          "sd","4.6")a
    """

    path = os.getcwd()
    os.chdir(workdir)

    # Replace parameter names in the control file with parameter values
    findandreplace = "sed '"
    for i,keyword in enumerate(pnames):
        findandreplace += "s/%s/%s/g;"%(keyword,pvalues[i])
    findandreplace += "' %s > %s.input"%(input_template,label)

    # This command runs sed ('stream editor', a standard command line tool)
    returned = subprocess.call(findandreplace, shell=True)

    #Runs the executable with given settings
    command = "%s < %s.input > %s.output"%(exec_name,label,label)
    print(command)
    returned = subprocess.call(command,shell=True)

    # Move back to calling directory
    os.chdir(path)

    return
